package janken.visualComponents;

import static janken.Main.*;

import java.util.Random;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import janken.Main;
import janken.cotohaAPI.SentimentData;
import janken.cotohaAPI.SentimentData_Result;

public class TextInputPanel extends javax.swing.JPanel {

	/**
	 * Creates new form TextInputPanel
	 */
	public TextInputPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		jLabel1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jPanel1 = new javax.swing.JPanel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();

		setBackground(new java.awt.Color(204, 204, 204));
		setForeground(new java.awt.Color(51, 51, 51));
		setLayout(new java.awt.GridBagLayout());

		jLabel1.setFont(Main.PIXEL_MPLUS_24);
		jLabel1.setForeground(new java.awt.Color(51, 51, 51));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("感情分析のための文章を入力してください。");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 0.2;
		gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
		add(jLabel1, gridBagConstraints);

		jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
		jTextArea1.setColumns(20);
		jTextArea1.setFont(Main.PIXEL_MPLUS_16);
		jTextArea1.setForeground(new java.awt.Color(51, 51, 51));
		jTextArea1.setLineWrap(true);
		jTextArea1.setRows(5);
		jTextArea1.setCaretColor(new java.awt.Color(51, 51, 51));
		jTextArea1.setMargin(new java.awt.Insets(15, 15, 15, 15));
		jScrollPane1.setViewportView(jTextArea1);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 0.8;
		gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
		add(jScrollPane1, gridBagConstraints);

		jPanel1.setBackground(new java.awt.Color(204, 204, 204));
		jPanel1.setLayout(new java.awt.GridBagLayout());

		jButton1.setBackground(new java.awt.Color(0, 153, 255));
		jButton1.setFont(Main.PIXEL_MPLUS_16);
		jButton1.setForeground(new java.awt.Color(51, 51, 51));
		jButton1.setText("分析する");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.weightx = 0.5;
		jPanel1.add(jButton1, gridBagConstraints);

		jButton2.setBackground(new java.awt.Color(0, 255, 51));
		jButton2.setFont(Main.PIXEL_MPLUS_16);
		jButton2.setForeground(new java.awt.Color(51, 51, 51));
		jButton2.setText("タイトルへ戻る");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 0.5;
		jPanel1.add(jButton2, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 20, 15, 20);
		add(jPanel1, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		// TODO add your handling code here:
		String inputText = jTextArea1.getText();
		inputText = inputText.replace("\n", "");

		if (Main.DEBUG) {
			System.out.println("inputText--------------");
			System.out.println(inputText);
			System.out.println("-----------------------");
		}
		if (inputText.isEmpty()) {
			Object[] msg = {"何か入力してください。"};
			JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
			return;
		}

		javax.swing.JPanel parent = (javax.swing.JPanel) SwingUtilities.getAncestorOfClass(javax.swing.JPanel.class, this);
		java.awt.CardLayout layout = (java.awt.CardLayout) parent.getLayout();

		SentimentData data = Main.getCotoha().doSentiment(inputText);
		if (data == null) {
			Object[] msg = {"文章が適切ではありません。\nタブコード等は入れないようにお願いします。"};
			JOptionPane.showMessageDialog(this, msg, "Warning", JOptionPane.WARNING_MESSAGE);
			return;
		}
		int hand = selectHand(data);
		Main.mainFrame.getMyHandResultPanel().setSelectHand(hand);
		Main.mainFrame.getJankenResultPanel().setSentimentData(data);

		layout.next(parent);
		jTextArea1.setText("");
	}//GEN-LAST:event_jButton1ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		// TODO add your handling code here:
		javax.swing.JPanel parent = (javax.swing.JPanel) SwingUtilities.getAncestorOfClass(javax.swing.JPanel.class, this);
		java.awt.CardLayout layout = (java.awt.CardLayout) parent.getLayout();

		layout.show(parent, "card1");
		jTextArea1.setText("");
	}//GEN-LAST:event_jButton2ActionPerformed

	private int selectHand(SentimentData data) {
		/*
		 * 得たデータから出す手を選択
		 *
		 * Negative or Positiveのscoreが高ければ(1に近ければ)グーを出す
		 * 逆に低ければ(0に近ければ)パーとチョキを出す。主にパーが出やすい。
		 * Neutralであればチョキを出しやすい。scoreに応じてパーも出やすくする。
		 *
		 */
		if (data == null) {
			return -1;
		}

		if (DEBUG) {
			System.out.println("文章から感情の分析結果");
			System.out.println(data);
		}

		String sentiment = data.getResult().getSentiment();
		double score = 0.0;
		Random random = new Random();
		double r = random.nextDouble();

		if (DEBUG) {
			System.out.println("NegaPosi: " + data.getResult().getSentiment());
			System.out.println("Score: " + data.getResult().getScore());
			System.out.println("randomの数: " + r);
		}

		if (sentiment.equals(SentimentData_Result.POSITIVE)) {
			score = data.getResult().getScore();
			if (score >= 0.6) {
				return GU;
			} else if (score >= 0.2) {
				double p = map(score, 0.2, 0.6, 0, 1);
				if (p >= r) {
					return GU;
				} else {
					return PA;
				}
			} else {
				double p = map(score, 0, 0.2, 0.5, 0);
				if (p >= r) {
					return CHO;
				} else {
					return PA;
				}
			}
		} else if (sentiment.equals(SentimentData_Result.NEGATIVE)) {
			score = data.getResult().getScore();
			if (score >= 0.6) {
				return GU;
			} else if (score >= 0.2) {
				double p = map(score, 0.2, 0.6, 0, 1);
				if (p >= r) {
					return GU;
				} else {
					return PA;
				}
			} else {
				double p = map(score, 0, 0.2, 0.5, 0);
				if (p >= r) {
					return CHO;
				} else {
					return PA;
				}
			}
		} else {
			score = data.getResult().getScore();
			if (score >= 0.4) {
				return CHO;
			} else {
				double p = map(score, 0, 0.4, 0, 1);
				if (p >= r) {
					return CHO;
				} else {
					return PA;
				}
			}
		}
	}

	private double map(double x, double in_min, double in_max, double out_min, double out_max) {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextArea jTextArea1;
	// End of variables declaration//GEN-END:variables
}
